const socket = io();
var gl_todos = [];

/*
** TempContentsContainer: a JQuery element to stock others JQuery elements
** by .append() them into it
*/
const tempContentsContainer = $('<div>')

/*
** switch function to know if front is in a todo modification process
** I prefer using this way instead of a global variable, not sure that is
** prettier but well, we'll see.
** id = id of the field being modifing
*/
const whoIsModifying = (function (id)
{
	let myStaticVar = -1;

	return function (id) {
	    //if there is a parameter passed in the function, we give it the new value, else, it keep its value
		if(typeof (id) === typeof(myStaticVar)) {
			myStaticVar = id;
		}
		
		return (myStaticVar);
	};
})();

/*
** function with static variable to stock the todoList from back to front
** and get it from front
*/
const getTodoList = (function (pTodoList) {
	let staticTodoList = [];

	return (function (pTodoList) {
		if(typeof (pTodoList) === typeof(staticTodoList)) {
			staticTodoList = pTodoList;
		}

		return staticTodoList;
	});
})();

/*
** give the focus on the main add_todo <input> and select its content
*/
function selectAddEntryInput() {
	$('#add_entry_input').select();
}

/*
** get the todoList form the server by post protocol, 
** save it in the getTodolist() function and
** call pFunction while passing the todoList in argument
*/
function getTodoListFromServerNDo(pFunction) {
	$.post('/getTodoList', function (data) {
		getTodoList(data.todoList);
		pFunction(data.todoList);
	})
}

/*
** take a $('<li>') JQuery Element and append() it a formatted todo
*/
function loadTodoInLi(pLiEl, pTodo) {
	pLiEl.append($('<img src="/imgs/list.png" /><span id="span_' + pTodo.id + '">' + pTodo.todoString + '</span><button class="mod_button" id="mod_' + pTodo.id + '" title="Modifier">M</button><button class="del_button" id="del_' + pTodo.id + '" title="Supprimer">X</button>'));
}

function firstLoadTodoListInDOM(pTodoList) {
	let ulContainer = $('ul#todo_list');
		ulContainer.hide(0);
	
	for (let i = 0, tempTodo = null; i < pTodoList.length; i++) {
		tempTodo = new TodoEl(pTodoList[i]);
		tempTodo.prependInList();
		gl_todos.unshift(tempTodo);
	}

	ulContainer.show(500);

	selectAddEntryInput();

	/*
	** nothing is being modifiying
	*/
	whoIsModifying(-1);
}

function clearTodoListInDOM() {
	$('ul#todo_list').empty();
}

function reLoadTodoListInDOM(pTodoList) {
	clearTodoListInDOM();
	firstLoadTodoListInDOM(pTodoList);
}

function setEventsDelButtons() {
	$('button.del_button').each(function () {
		setEventsDelButton(this);	
	});
}

function setEventsDelButton(pButton) {
	pButton.addEventListener('click', function () {
		socket.emit('csIWantToDelThisTodo', { todoId: pButton.id.slice(4) });
		selectAddEntryInput();
	});
}

/*
** take an $('<input type="text">') element and if we press enter, it submits the form
*/
function setEnterMeanSend(inputEl, sendEl) {
	inputEl.keydown(function (e) {
		if(e.which === 13) {
			sendEl.click();
		}
	});	
}

function setEventsModButton(pButton) { 
	pButton.addEventListener('click', function (e) {
		if (whoIsModifying() !== -1) {
			//unset field who is in modifying
			$('li#todo_' + whoIsModifying() + ' form').remove();
			$('li#todo_' + whoIsModifying()).append(tempContentsContainer.find('span'));
			$('li#todo_' + whoIsModifying()).append(tempContentsContainer.find('button[class=mod_button]'));
			$('li#todo_' + whoIsModifying()).append(tempContentsContainer.find('button[class=del_button]'));
		}

		let id = parseInt(pButton.id.slice(4));
		let spanTodo = 	$('li#todo_' + id + ' span[id=span_' + id + ']');
		let formReplace = $('<form method="post" action="/"><input type="text" name="todoValue" value="' + spanTodo.text() + '" placeholder="(80 caractères maximum)" maxlength="80" required /><input type="submit" value="OK" title="Valider" /><button title="Annuler">NO</button></form>');

		whoIsModifying(id);
		tempContentsContainer.append($('li#todo_' + id + ' span'));
		tempContentsContainer.append($('li#todo_' + id + ' button.mod_button'));
		tempContentsContainer.append($('li#todo_' + id + ' button.del_button'));

		$('li#todo_' + id).append(formReplace);
		$('li#todo_' + id + ' input[type=text]').select();
		setEnterMeanSend($('li#todo_' + id + ' input[type=text]'), $('li#todo_' + id + ' input[type=submit]'));

		/*
		** when user click on NO button
		*/
		$('li#todo_' + id + ' button').click(function (e) {
			e.preventDefault();
			getTodoListFromServerNDo(reLoadTodoListInDOM);
			tempContentsContainer.empty();
		});

		/*
		** press escape do the same as click on NO button
		*/
		$('li#todo_' + id + ' input[type=text]').keydown(function (e) {
			if(e.which === 27) {
				$('li#todo_' + id + ' button').click();
			}
		});

		$('li#todo_' + id + ' input[type=text]').select();

		/*
		** when user validates entry
		*/
		$('li#todo_' + id + ' form').on('submit', function (e) {
			e.preventDefault();
			$.post('/modTodo/', { todoValue: $('li#todo_' + id + ' input[type=text]').val(), todoId: id });
			getTodoListFromServerNDo(reLoadTodoListInDOM);
		})
	});
}

/*
** what to do when we click on a "Modifier" button
*/
function setEventsModButtons() { 
	$('button.mod_button').each(function () {
		setEventsModButton(this);
	});
}

function setEventsButtons() {
	setEventsDelButtons();
	setEventsModButtons();
}

function createNewLiTodo(pId) {
	return ($('<li class="todo" id="todo_' + pId + '"></li>'));
}




/*
** TodoEl is a wrapper object that contains
** the todo and all html objects to show it in an <ul> element
*/
function TodoEl(pTodo) {
	let thisTodoEl = this;

	this.todoInfos = pTodo;

	this.jQEl = $('<li class="todo" id="todo_' + this.todoInfos.id + '"></li>');
	this.jQEl.append($('<img src="/imgs/list.png" /><span id="span_' + this.todoInfos.id + '">' + this.todoInfos.todoString + '</span><button class="mod_button" id="mod_' + this.todoInfos.id + '" title="Modifier">M</button><button class="del_button" id="del_' + this.todoInfos.id + '" title="Supprimer">X</button>'));

	//del_todo button click() event
	this.jQEl.find('button.del_button').click(function () {
		socket.emit('csIWantToDelThisTodo', { todoId: thisTodoEl.todoInfos.id });
		selectAddEntryInput();
	});

//================================================
	//mod_todo button click() event
	this.jQEl.find('button.mod_button').click(function () {
		console.log('ca modifie !');

		if (whoIsModifying() !== -1) {
			//unset field who is in modifying
			$('li#todo_' + whoIsModifying() + ' form').remove();
			$('li#todo_' + whoIsModifying()).append(tempContentsContainer.find('span'));
			$('li#todo_' + whoIsModifying()).append(tempContentsContainer.find('button[class=mod_button]'));
			$('li#todo_' + whoIsModifying()).append(tempContentsContainer.find('button[class=del_button]'));
		}
		
		let id = thisTodoEl.todoInfos.id;
		let spanTodo = thisTodoEl.jQEl.find('span#span_' + id);
		let formReplace = $('<form method="post" action="/"><input type="text" name="todoValue" value="' + spanTodo.text() + '" placeholder="(80 caractères maximum)" maxlength="80" required /><input type="submit" value="OK" title="Valider" /><button title="Annuler">NO</button></form>');

		whoIsModifying(id);
		tempContentsContainer.append($('li#todo_' + id + ' span'));
		tempContentsContainer.append($('li#todo_' + id + ' button.mod_button'));
		tempContentsContainer.append($('li#todo_' + id + ' button.del_button'));

		$('li#todo_' + id).append(formReplace);
		$('li#todo_' + id + ' input[type=text]').select();
		setEnterMeanSend($('li#todo_' + id + ' input[type=text]'), $('li#todo_' + id + ' input[type=submit]'));

		/*
		** when user click on NO button
		*/
		$('li#todo_' + id + ' button').click(function (e) {
			e.preventDefault();
			getTodoListFromServerNDo(reLoadTodoListInDOM);
			tempContentsContainer.empty();
		});

		/*
		** press escape do the same as click on NO button
		*/
		$('li#todo_' + id + ' input[type=text]').keydown(function (e) {
			if(e.which === 27) {
				$('li#todo_' + id + ' button').click();
			}
		});

		$('li#todo_' + id + ' input[type=text]').select();

		/*
		** when user validates entry
		*/
		$('li#todo_' + id + ' form').on('submit', function (e) {
			e.preventDefault();
			$.post('/modTodo/', { todoValue: $('li#todo_' + id + ' input[type=text]').val(), todoId: id });
			getTodoListFromServerNDo(reLoadTodoListInDOM);
		})
	});

//================================================

	//click on the span do the same as click on mod button
	this.jQEl.find('span').click(function (e) {
		thisTodoEl.jQEl.find('button.mod_button').click();
	});

	this.fadeIn = function (pTime) { this.jQEl.fadeIn(pTime) }
	this.fadeOut = function (pTime) { this.jQEl.fadeOut(pTime) }
	this.show = function (pTime) { this.jQEl.show(pTime) }
	this.hide = function (pTime) { this.jQEl.hide(pTime) }
	this.slideToggle = function (pTime) { this.jQEl.slideToggle(pTime) }
	this.appendTo = function (pEl) { this.jQEl.appendTo(pEl) }
	this.prependTo = function (pEl) { this.jQEl.prependTo(pEl) }
	this.remove = function () { this.jQEl.remove() }

	this.prependInList = function () {
		this.prependTo($('ul#todo_list'));
	}

	this.prependInListAnim = function () {
		this.fadeOut(0);
		this.prependInList();
		thisTodoEl.slideToggle(300);
	}

	this.removeFromList = function () {
		this.jQEl.remove();
	}

	this.removeFromListAnim = function () {
		this.jQEl.hide(300, function () {
			thisTodoEl.remove();
		});
	}
}

/****************/
/***   MAIN   ***/
/****************/
$(function () {

	socket.emit('csSendMeTodoList');
	selectAddEntryInput();

	/*
	** Manage the disconnection button
	*/
	$('button#disconnect').click(function () {
		window.location.href="/disconnect";
	});

	/*
	** Manage the validation form
	*/
	$('form').on('submit', function (e) {
		e.preventDefault();
		socket.emit('csIWantToAddThisTodo', { todoInput: $('input#add_entry_input').val() });
		$('input#add_entry_input').val('');
		selectAddEntryInput();
	});

	/*********************
	** SOCKET MANAGEMENT *
	**********************/
	socket.on('ssNewAddedTodo', function (data) {
		let newTodoEl = new TodoEl(data.newTodo);
			newTodoEl.prependInListAnim();

		gl_todos.unshift(newTodoEl);
	});

	socket.on('ssHereIsTodoList', function (data) {
		firstLoadTodoListInDOM(data.todoList);
	});

	socket.on('ssThisTodoHasBeenDeleted', function (data) {
		delTodoEl = gl_todos.filter(function (value, index, arr) {
			return (value.todoInfos.id === data.delTodoId);
		})[0];

		delTodoEl.removeFromListAnim();
		gl_todos = gl_todos.filter(function (value, index, arr) {
			return (value.todoInfos.id !== data.delTodoId);
		});
	});
});